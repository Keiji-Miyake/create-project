# Project Intelligence

## Critical Implementation Patterns

- データアクセスにはリポジトリパターンを使用
  - データの永続化と取得の一貫性を確保
  - ビジネスロジックとデータアクセスの分離を徹底
- エラーハンドリングパターン
  - 統一された例外処理の実装
  - エラーログの標準化
- コンポーネント設計パターン
  - 関数コンポーネントの使用
  - 継承よりもコンポジションを優先
  - 責務の明確な分離

## Project Specific Requirements

- セキュリティ要件
  - 環境変数の使用は制限付きで許可
  - 許可されたコマンド: npm, pnpm, node, git
  - 破壊的な操作は確認を必要とする
- 開発規約
  - 日本語によるコメント記述
  - UTF-8エンコーディングの徹底

## Development Workflow Patterns

- 変更管理
  - コミットの基本ルール
    - すべての作業完了時に必ずコミットを実行
    - 1つの論理的な変更を1つのコミットに
    - WIPコミットの回避
    - PRレビューの必須化
    - 未コミットの変更を残したままの作業終了を禁止
  - コミットメッセージ規約
    - プレフィックスの使用: feat:, fix:, docs:, test:, refactor:
    - 日本語での説明を含める
    - 関連するチケット番号の記載
  - コミットのタイミング
    - 機能実装の完了時
    - バグ修正の完了時
    - テストの追加・修正時
    - ドキュメントの更新時
  - コミットの粒度
    - 単一の責務に関する変更のみを含める
    - レビュー可能な大きさに制限（目安：200行以内）
    - 関連する変更は同一コミットにまとめる
  - 作業前の確認事項
    - 作業ブランチの最新化
    - 作業内容の明確化
    - 影響範囲の確認
- 品質管理
  - コミット前のlintとテスト実行
  - 変更範囲の最小化
  - レビュー指摘事項の確実な反映

## Known Challenges

- 環境変数の制限付き使用による開発フロー
- レビュープロセスの効率化
- コンポーネント再利用性の最適化